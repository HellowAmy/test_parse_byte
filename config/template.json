{
    "mode_list": [
        {
            "pack_begin": "aaee",
            "pack_end": "eefc",
            "format_cmds": [
                "{aaee*}",
                "{*eefc}",
                "(2*)",
                "(4*)",
                "(4*)",
                "[+4]"
            ]
        },
        {
            "pack_begin": "aaee",
            "pack_end": "eefc",
            "format_cmds": [
                "{aaee*}",
                "{*eefc}",
                "(2*)",
                "(4*)",
                "[+4+2]"
            ]
        },        
        {
            "pack_begin": "SS",
            "pack_end": "SS",
            "format_cmds": [
                "符号说明: 字符 * 代表剩余字符左偏,或者右偏, DD 代表数字, SS 代表字符",
                "命令说明: 跳过命令条件触发时, 会跳过接下来的多条命令, 可用于创建不同分支的格式化效果",
                "长度类型: d:[4: short 8: int 16: long long] ,f:[8: float 16: double]",
                "转换操作: [u:d:f:w] [u: 转为无符号] [d: 转为整数-具体类型看长度] [f: 转为浮点数-具体类型看长度] [w: 大小端字节序转换]",

                "=====",
                "{SS*}          // 查找指定 SS 字符并截断 ,左偏", 
                "{*SS}          // 查找指定 SS 字符并截断 ,右偏",
                "(DD*)          // 偏移 DD 个字符并截断 ,左偏",
                "(*DD)          // 偏移 DD 个字符并截断 ,右偏",
                "<DD>=0         // 从当前位置标记 DD 个字符 ,放入标记容器的 0 索引",
                "[+D]           // 格式列表 ,循环切割 DD 个位置 ,直到剩余字符为空",
                "[+D1+D2]       // 格式分段列表 ,循环切割 DX 个位置 ,可以由多个 DX 组合,直到剩余字符为空",
                "<D1>(DD)=1     // 偏移 DD 个位置, 标记 DD 个字符 ,放入标记容器的 1 索引",
                "<D1>{SS}=2     // 查找到 SS 字符位置, 标记 DD 个字符 ,放入标记容器的 2 索引",
                ":D1:(D2){SS}       // 跳过命令条件 ,D2 为对比的标记容器索引数据 ,SS 为对比数据 ,当条件不满足时跳过 D1 条数据 ,否则继续执行",
                "!DD![u:d:f:w]      // 字节转为数值 ,DD 为切割的长度并将字节转为对应类型 , [] 内选项对应转成无符号类型、大小端转换、浮点数三种选项",
                "!DD!(D1)[u:d:f:w]  // 偏移切割字节转为数值 ,D1 为偏移位置后切割 DD 长度的字节 ,其他相关同上",
                "!DD!{SS}[u:d:f:w]  // 查找切割字节转为数值 ,SS 为查找的偏移子串 ,其他相关同上",
                "====="
            ]
        }
    ]
}